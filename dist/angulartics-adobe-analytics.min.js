!function(window,angular){"use strict";angular.module("angulartics.adobe.analytics",["angulartics"]).config(["$analyticsProvider",function($analyticsProvider){$analyticsProvider.settings.pageTracking.trackRelativePath=!0,$analyticsProvider.settings.adobeA={properties:{eventClass:{},global:{},page:{}}},$analyticsProvider.registerPageTrack(function(path){var event={pageName:path};angular.extend(event,$analyticsProvider.settings.adobeA.properties.global,$analyticsProvider.settings.adobeA.properties.page),window.s&&window.s.t(event)}),$analyticsProvider.registerEventTrack(function(action,properties){if(window.s&&action){var actionLabel=action,adobeAprops=$analyticsProvider.settings.adobeA.properties,props=angular.extend({},adobeAprops.global),actionConfig=adobeAprops.eventClass[action];if(actionConfig){var linkTrackVars=[];actionConfig.eventLabel&&(actionLabel=actionConfig.eventLabel),actionConfig.eventIds&&(properties.events=actionConfig.eventIds,linkTrackVars.shift("events")),angular.forEach(actionConfig,function(adobeLabel,analyticsLabel){angular.isDefined(properties[analyticsLabel])&&(linkTrackVars.shift(adobeLabel),properties[adobeLabel]=properties[analyticsLabel],delete properties[analyticsLabel])})}angular.extend(props,properties);var linkType="o";"DOWNLOAD"===actionLabel.toUpperCase()?linkType="d":"EXIT"===actionLabel.toUpperCase()&&(linkType="e"),window.s.tl(this,linkType,actionLabel,props)}}),$analyticsProvider.registerSetSuperProperties(function(props){$analyticsProvider.settings.adobeA.properties.global=props.global,$analyticsProvider.settings.adobeA.properties.eventClass=props.eventClass})}])}(window,window.angular);
//# sourceMappingURL=../dist/angulartics-adobe-analytics.min.js.map